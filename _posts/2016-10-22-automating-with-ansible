---
layout: post
title: Automating with Ansible
---

Automating tasks for installing new machines or managing your different environments is a must in the days of
Continous Delivery. Most often I have seen these solutions done by chef or puppet. When I've worked in those projects
many of the tasks/recipes has already been setup and whenever I've gone in and update those I've felt that it's a bit of
 a jungle with a steep learning curve. I was therefore very interested when I got introduced to Ansible by a colleague.

# What is Ansible?
(Ansible)[https://www.ansible.com/] is an IT automation tool to orchestrate, provision, deploy or install your infrastructure.
Their goal is to be "simple" as in easy to use, yet very powerful in it's features.


As an example, let's say that you have an application that has a lot of prerequired steps to be installed on a fresh environment. In
a delivery pipeline you would have to automate those preqrequired steps so that your pipe would continously setup a new version
 of your application each time. Another example could be that you have a lot of different environments for production and test. Whenever
 you update a configuration on the environments you need to do it on all existing environments, a tidious and boring task. In such
 a situation Ansible could help you with automating the provisioning of the updated configuration.

# How does it work?

Ansible uses a control-machine, a machine were you've installed ansible to run your tasks towards all your target-hosts (e.g. production, test etc).
Ansible requires the control-machine to have python 2.6 or 2.7 to be installed and is currently not supported on Windows. When Ansible executes, it utilizes
SSH towards the client.

## Okey, enough talk, hands-on!

If you want to try it out without any installation requirements I've prepared a